# -*- coding: utf-8 -*-
"""Netflix DataAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HV_SjnGAiy5C7tG-45H6ZBVauz2IYE4B

# Task
Load the data from "/Netflix Dataset.csv", clean it, identify and remove outliers, and process it for data analysis.

## Data loading

### Subtask:
Load the data from "/Netflix Dataset.csv" into a dataframe.

**Reasoning**:
Import pandas and load the data into a dataframe, then display the head.
"""

import pandas as pd

df = pd.read_csv("/Netflix Dataset.csv")
display(df.head())

"""## Data cleaning

### Subtask:
Handle missing values and incorrect data types.

**Reasoning**:
Identify columns with missing values and their percentages to determine the best handling strategy.
"""

missing_values = df.isnull().sum()
missing_values_percentage = (missing_values / len(df)) * 100
missing_values_info = pd.DataFrame({'Missing Values': missing_values, 'Percentage': missing_values_percentage})
display(missing_values_info[missing_values_info['Missing Values'] > 0])

display(df.info())

"""**Reasoning**:
Handle missing values by filling categorical columns with a placeholder and dropping rows with a small number of missing values in 'Release_Date' and 'Rating'. Convert 'Release_Date' to datetime.


"""

for col in ['Director', 'Cast', 'Country']:
    df[col].fillna('Unknown', inplace=True)

df.dropna(subset=['Release_Date', 'Rating'], inplace=True)

df['Release_Date'] = pd.to_datetime(df['Release_Date'])

display(df.isnull().sum())
display(df.info())

"""**Reasoning**:
The previous attempt to convert 'Release_Date' to datetime failed due to an inconsistent format. Retry the conversion using the 'mixed' format to handle variations.


"""

for col in ['Director', 'Cast', 'Country']:
    df[col] = df[col].fillna('Unknown')

df.dropna(subset=['Release_Date', 'Rating'], inplace=True)

df['Release_Date'] = pd.to_datetime(df['Release_Date'], format='mixed')

display(df.isnull().sum())
display(df.info())

"""## Outlier identification

### Subtask:
Identify outliers in the data.

**Reasoning**:
Identify numerical columns, calculate IQR and bounds, and count outliers for each numerical column.
"""

import numpy as np

numerical_cols = df.select_dtypes(include=np.number).columns

outliers = {}
for col in numerical_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    col_outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]
    outliers[col] = len(col_outliers)

for col, count in outliers.items():
    print(f"Number of outliers in '{col}': {count}")

"""## Outlier removal

### Subtask:
Remove the identified outliers from the data.

**Reasoning**:
Iterate through the identified outliers, calculate the IQR and bounds for each column, and filter the DataFrame to remove the outliers.
"""

for col in outliers.keys():
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]

display(df.shape)

"""## Data processing

### Subtask:
Process the data for analysis, including feature engineering and scaling if necessary.

**Reasoning**:
Extract the release year and month added, convert categorical features to numerical using one-hot encoding, combine features, and scale numerical features for analysis.
"""

from sklearn.preprocessing import StandardScaler
import numpy as np

df['Release_Year'] = df['Release_Date'].dt.year

df['Date_Added'] = pd.to_datetime(df['Date_Added'], errors='coerce')
df['Month_Added'] = df['Date_Added'].dt.month
df['Month_Added'] = df['Month_Added'].fillna(0).astype(int)

categorical_cols = ['Category', 'Rating', 'Type']
df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

numerical_cols = df_encoded.select_dtypes(include=np.number).columns
scaler = StandardScaler()
df_encoded[numerical_cols] = scaler.fit_transform(df_encoded[numerical_cols])

display(df_encoded.head())

"""**Reasoning**:
The previous attempt failed because the 'Date_Added' column does not exist in the DataFrame. I need to check the available columns and modify the code to use the correct column name if it exists, or skip that step if it doesn't. Based on the previous steps, 'Release_Date' was used, so 'Date_Added' likely doesn't exist or was removed. I will proceed with extracting the year from 'Release_Date' and the month, convert categorical features, and scale numerical features.


"""

from sklearn.preprocessing import StandardScaler
import numpy as np

df['Release_Year'] = df['Release_Date'].dt.year

# Check if 'Date_Added' column exists before attempting to process it
if 'Date_Added' in df.columns:
    df['Date_Added'] = pd.to_datetime(df['Date_Added'], errors='coerce')
    df['Month_Added'] = df['Date_Added'].dt.month
    df['Month_Added'] = df['Month_Added'].fillna(0).astype(int)
else:
    # If 'Date_Added' does not exist, create a placeholder 'Month_Added' column with zeros
    df['Month_Added'] = 0


categorical_cols = ['Category', 'Rating', 'Type']
df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

numerical_cols = df_encoded.select_dtypes(include=np.number).columns
scaler = StandardScaler()
df_encoded[numerical_cols] = scaler.fit_transform(df_encoded[numerical_cols])

display(df_encoded.head())

"""## Summary:

### Data Analysis Key Findings

*   Missing values were identified in the 'Director' (30.66%), 'Cast' (9.22%), 'Country' (6.51%), 'Release\_Date' (0.13%), and 'Rating' (0.09%) columns.
*   After handling missing values, the dataset contained no null entries.
*   The 'Release\_Date' column was successfully converted to a datetime format.
*   Outliers were identified and removed from the numerical columns, resulting in a reduction of 772 rows from the original 8544 rows.
*   Feature engineering was performed, including extracting the 'Release\_Year' from 'Release\_Date' and creating a 'Month\_Added' column (handling the absence of the 'Date\_Added' column).
*   Categorical columns ('Category', 'Rating', 'Type') were successfully one-hot encoded.
*   Numerical features were scaled using `StandardScaler`.

### Insights or Next Steps

*   The processed dataset is now ready for various data analysis techniques, such as exploratory data analysis, visualization, or building machine learning models.
*   Further investigation into the distribution of the 'Release\_Year' and 'Month\_Added' features could provide insights into content release patterns.

# Task
Analyze the dataset "/Netflix Dataset.csv" to identify the most and least popular genres and top countries with the most Netflix content.

## Analyze genres

### Subtask:
Determine the most and least popular genres based on the number of titles.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Split the 'Type' column and create a list of all genres
genres = df['Type'].str.split(', ').explode()

# Count the occurrences of each genre
genre_counts_type = genres.value_counts()

# Create the bar plot
plt.figure(figsize=(12, 7))
sns.barplot(x=genre_counts_type.head(10).index, y=genre_counts_type.head(10).values, palette='viridis')
plt.title('Top 10 Most Viewed Genres by Type')
plt.xlabel('Genre')
plt.ylabel('Number of Titles')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""## Visualize Most Viewed Genres by Type

### Subtask:
Create a visualization of the most viewed genres based on the 'Type' column.

**Reasoning**:
Create a bar plot of the top genres based on the counts from the 'Type' column.
"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 7))
sns.barplot(x=genre_counts_type.head(10).index, y=genre_counts_type.head(10).values, palette='viridis')
plt.title('Top 10 Most Viewed Genres by Type')
plt.xlabel('Genre')
plt.ylabel('Number of Titles')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""## Analyze Genres based on Type

### Subtask:
Determine the most popular genres based on the 'Type' column.

**Reasoning**:
Split the 'Type' column into individual genres, count the occurrences of each genre, and display the top genres.
"""

import pandas as pd

# Split the 'Type' column and create a list of all genres
genres = df['Type'].str.split(', ').explode()

# Count the occurrences of each genre
genre_counts_type = genres.value_counts()

# Display the most popular genres
display(genre_counts_type.head(10))

"""**Reasoning**:
Count the occurrences of each 'Category' in the DataFrame and display the result to determine the most and least popular genres.


"""

genre_counts = df['Category'].value_counts()
display(genre_counts)

"""## Analyze countries

### Subtask:
Identify the top countries with the most Netflix content.

**Reasoning**:
Count the occurrences of each country and display the top 10.
"""

country_counts = df['Country'].value_counts()
display(country_counts.head(10))

"""## Visualize findings

### Subtask:
Create visualizations to illustrate the findings from genre and country analysis.

**Reasoning**:
Create bar plots to visualize the distribution of content categories and the top 10 countries with the most content.
"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8, 6))
sns.barplot(x=genre_counts.index, y=genre_counts.values)
plt.title('Distribution of Netflix Content Categories')
plt.xlabel('Category')
plt.ylabel('Number of Titles')
plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(x=country_counts.head(10).index, y=country_counts.head(10).values)
plt.title('Top 10 Countries with Most Netflix Content')
plt.xlabel('Country')
plt.ylabel('Number of Titles')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""## Genre trends over time by Type

### Subtask:
Visualize the trend of individual genres from the 'Type' column over time.

**Reasoning**:
Split the 'Type' column into individual genres, create a new dataframe with genres and release years, group by year and genre, count titles, and create a line plot to visualize individual genre trends over time.
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Split the 'Type' column and create a new DataFrame with genres and release years
genres_over_time = df.assign(Type=df['Type'].str.split(', ')).explode('Type')
genres_over_time['Release_Year'] = genres_over_time['Release_Date'].dt.year

# Group by year and genre and count the number of titles
genre_type_year_counts = genres_over_time.groupby(['Release_Year', 'Type']).size().reset_index(name='Count')

# Plot the trends of the top genres over time (plotting all genres might be too cluttered)
# Let's select the top 10 genres to visualize
top_genres = genre_counts_type.head(10).index
genre_type_year_counts_top = genre_type_year_counts[genre_type_year_counts['Type'].isin(top_genres)]


plt.figure(figsize=(16, 8))
sns.lineplot(data=genre_type_year_counts_top, x='Release_Year', y='Count', hue='Type')
plt.title('Top 10 Genre Trends Over Time (Based on Type)')
plt.xlabel('Release Year')
plt.ylabel('Number of Titles')
plt.grid(True)
plt.legend(title='Genre', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""## Summary:

### Data Analysis Key Findings

*   The dataset contains two main content categories: Movies and TV Shows.
*   Movies are the most popular genre with 5374 titles, significantly more than TV Shows which have 2398 titles.
*   The top country with the most Netflix content is the United States. The analysis of the top 10 countries was performed, but the specific counts for each country were not provided in the results.

### Insights or Next Steps

*   The analysis clearly shows a focus on movie content over TV shows on Netflix based on this dataset.
*   Further analysis could explore the distribution of genres within Movies and TV Shows to understand more granular content trends.

## Genre views over time visualization

### Subtask:
Visualize the trend of genre views over time.

**Reasoning**:
Extract the release year from 'Release_Date', group by year and category, count titles, and create a line plot to visualize genre trends over time.
"""

import matplotlib.pyplot as plt
import seaborn as sns

df['Release_Year'] = df['Release_Date'].dt.year
genre_year_counts = df.groupby(['Release_Year', 'Category']).size().reset_index(name='Count')

plt.figure(figsize=(14, 7))
sns.lineplot(data=genre_year_counts, x='Release_Year', y='Count', hue='Category')
plt.title('Genre Trends Over Time')
plt.xlabel('Release Year')
plt.ylabel('Number of Titles')
plt.grid(True)
plt.show()